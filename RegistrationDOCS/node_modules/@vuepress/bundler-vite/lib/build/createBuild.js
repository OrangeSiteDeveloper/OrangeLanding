"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createBuild = void 0;
const vite_1 = require("vite");
const utils_1 = require("@vuepress/utils");
const renderPage_1 = require("./renderPage");
const resolveViteConfig_1 = require("./resolveViteConfig");
const createBuild = (options) => async (app) => {
    // vite compile
    let clientOutput;
    let serverOutput;
    await utils_1.withSpinner('Compiling with vite')(async () => {
        // create webpack config
        const clientConfig = resolveViteConfig_1.resolveViteConfig({
            app,
            options,
            isServer: false,
        });
        const serverConfig = resolveViteConfig_1.resolveViteConfig({
            app,
            options,
            isServer: true,
        });
        [clientOutput, serverOutput] = await Promise.all([
            vite_1.build(clientConfig),
            vite_1.build(serverConfig),
        ]);
    });
    // render pages
    await utils_1.withSpinner('Rendering pages')(async () => {
        // load ssr template file
        const ssrTemplate = (await utils_1.fs.readFile(app.options.templateSSR)).toString();
        // get client bundle entry chunk and css asset
        const clientEntryChunk = clientOutput.output.find((item) => item.type === 'chunk' && item.isEntry);
        const clientCssAsset = clientOutput.output.find((item) => item.type === 'asset' && item.fileName.endsWith('.css'));
        // get server bundle entry chunk
        const serverEntryChunk = serverOutput.output.find((item) => item.type === 'chunk' && item.isEntry);
        // load the compiled server bundle
        const { createVueApp } = require(app.dir.dest('.server', serverEntryChunk.fileName));
        // create vue ssr app
        const { app: vueApp, router: vueRouter } = await createVueApp();
        // pre-render pages to html files
        const spinner = utils_1.ora();
        for (const page of app.pages) {
            spinner.start(`Rendering pages ${utils_1.chalk.magenta(page.path)}`);
            await renderPage_1.renderPage({
                app,
                page,
                vueApp,
                vueRouter,
                ssrTemplate,
                output: clientOutput.output,
                outputEntryChunk: clientEntryChunk,
                outputCssAsset: clientCssAsset,
            });
        }
        spinner.stop();
    });
    // keep the server bundle files in debug mode
    if (!app.env.isDebug) {
        // remove server dest directory after pages rendered
        await utils_1.fs.remove(app.dir.dest('.server'));
    }
};
exports.createBuild = createBuild;
